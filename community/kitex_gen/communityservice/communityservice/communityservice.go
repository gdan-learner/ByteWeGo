// Code generated by Kitex v0.4.4. DO NOT EDIT.

package communityservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	communityservice "github.com/gdan0324/ByteWeGo/community/kitex_gen/communityservice"
)

func serviceInfo() *kitex.ServiceInfo {
	return communityServiceServiceInfo
}

var communityServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommunityService"
	handlerType := (*communityservice.CommunityService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetFollowList":   kitex.NewMethodInfo(getFollowListHandler, newCommunityServiceGetFollowListArgs, newCommunityServiceGetFollowListResult, false),
		"GetFollowerList": kitex.NewMethodInfo(getFollowerListHandler, newCommunityServiceGetFollowerListArgs, newCommunityServiceGetFollowerListResult, false),
		"Follow":          kitex.NewMethodInfo(followHandler, newCommunityServiceFollowArgs, newCommunityServiceFollowResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "communityservice",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*communityservice.CommunityServiceGetFollowListArgs)
	realResult := result.(*communityservice.CommunityServiceGetFollowListResult)
	success, err := handler.(communityservice.CommunityService).GetFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommunityServiceGetFollowListArgs() interface{} {
	return communityservice.NewCommunityServiceGetFollowListArgs()
}

func newCommunityServiceGetFollowListResult() interface{} {
	return communityservice.NewCommunityServiceGetFollowListResult()
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*communityservice.CommunityServiceGetFollowerListArgs)
	realResult := result.(*communityservice.CommunityServiceGetFollowerListResult)
	success, err := handler.(communityservice.CommunityService).GetFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommunityServiceGetFollowerListArgs() interface{} {
	return communityservice.NewCommunityServiceGetFollowerListArgs()
}

func newCommunityServiceGetFollowerListResult() interface{} {
	return communityservice.NewCommunityServiceGetFollowerListResult()
}

func followHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*communityservice.CommunityServiceFollowArgs)
	realResult := result.(*communityservice.CommunityServiceFollowResult)
	success, err := handler.(communityservice.CommunityService).Follow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommunityServiceFollowArgs() interface{} {
	return communityservice.NewCommunityServiceFollowArgs()
}

func newCommunityServiceFollowResult() interface{} {
	return communityservice.NewCommunityServiceFollowResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFollowList(ctx context.Context, req *communityservice.GetFollowRequest) (r *communityservice.GetFollowResponse, err error) {
	var _args communityservice.CommunityServiceGetFollowListArgs
	_args.Req = req
	var _result communityservice.CommunityServiceGetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, req *communityservice.GetFollowerRequest) (r *communityservice.GetFollowerResponse, err error) {
	var _args communityservice.CommunityServiceGetFollowerListArgs
	_args.Req = req
	var _result communityservice.CommunityServiceGetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Follow(ctx context.Context, req *communityservice.FollowRequest) (r *communityservice.FollowResponse, err error) {
	var _args communityservice.CommunityServiceFollowArgs
	_args.Req = req
	var _result communityservice.CommunityServiceFollowResult
	if err = p.c.Call(ctx, "Follow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
