// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	videoservice "github.com/gdan0324/ByteWeGo/video/kitex_gen/videoservice"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videoservice.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction": kitex.NewMethodInfo(favoriteActionHandler, newVideoServiceFavoriteActionArgs, newVideoServiceFavoriteActionResult, false),
		"FavoriteList":   kitex.NewMethodInfo(favoriteListHandler, newVideoServiceFavoriteListArgs, newVideoServiceFavoriteListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "videoservice",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videoservice.VideoServiceFavoriteActionArgs)
	realResult := result.(*videoservice.VideoServiceFavoriteActionResult)
	success, err := handler.(videoservice.VideoService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFavoriteActionArgs() interface{} {
	return videoservice.NewVideoServiceFavoriteActionArgs()
}

func newVideoServiceFavoriteActionResult() interface{} {
	return videoservice.NewVideoServiceFavoriteActionResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videoservice.VideoServiceFavoriteListArgs)
	realResult := result.(*videoservice.VideoServiceFavoriteListResult)
	success, err := handler.(videoservice.VideoService).FavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFavoriteListArgs() interface{} {
	return videoservice.NewVideoServiceFavoriteListArgs()
}

func newVideoServiceFavoriteListResult() interface{} {
	return videoservice.NewVideoServiceFavoriteListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, req *videoservice.FavoriteActionRequest) (r *videoservice.FavoriteActionResponse, err error) {
	var _args videoservice.VideoServiceFavoriteActionArgs
	_args.Req = req
	var _result videoservice.VideoServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, req *videoservice.FavoriteListRequest) (r *videoservice.FavoriteListResponse, err error) {
	var _args videoservice.VideoServiceFavoriteListArgs
	_args.Req = req
	var _result videoservice.VideoServiceFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
