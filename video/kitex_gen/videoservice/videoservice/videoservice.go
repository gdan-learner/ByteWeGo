// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	videoservice "github.com/gdan0324/ByteWeGo/video/kitex_gen/videoservice"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videoservice.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateVideo":  kitex.NewMethodInfo(createVideoHandler, newVideoServiceCreateVideoArgs, newVideoServiceCreateVideoResult, false),
		"GetVideoList": kitex.NewMethodInfo(getVideoListHandler, newVideoServiceGetVideoListArgs, newVideoServiceGetVideoListResult, false),
		"GetFeed":      kitex.NewMethodInfo(getFeedHandler, newVideoServiceGetFeedArgs, newVideoServiceGetFeedResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "videoservice",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videoservice.VideoServiceCreateVideoArgs)
	realResult := result.(*videoservice.VideoServiceCreateVideoResult)
	success, err := handler.(videoservice.VideoService).CreateVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCreateVideoArgs() interface{} {
	return videoservice.NewVideoServiceCreateVideoArgs()
}

func newVideoServiceCreateVideoResult() interface{} {
	return videoservice.NewVideoServiceCreateVideoResult()
}

func getVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videoservice.VideoServiceGetVideoListArgs)
	realResult := result.(*videoservice.VideoServiceGetVideoListResult)
	success, err := handler.(videoservice.VideoService).GetVideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoListArgs() interface{} {
	return videoservice.NewVideoServiceGetVideoListArgs()
}

func newVideoServiceGetVideoListResult() interface{} {
	return videoservice.NewVideoServiceGetVideoListResult()
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videoservice.VideoServiceGetFeedArgs)
	realResult := result.(*videoservice.VideoServiceGetFeedResult)
	success, err := handler.(videoservice.VideoService).GetFeed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetFeedArgs() interface{} {
	return videoservice.NewVideoServiceGetFeedArgs()
}

func newVideoServiceGetFeedResult() interface{} {
	return videoservice.NewVideoServiceGetFeedResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateVideo(ctx context.Context, req *videoservice.CreateVideoRequest) (r *videoservice.CreateVideoResponse, err error) {
	var _args videoservice.VideoServiceCreateVideoArgs
	_args.Req = req
	var _result videoservice.VideoServiceCreateVideoResult
	if err = p.c.Call(ctx, "CreateVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoList(ctx context.Context, req *videoservice.GetVideoListRequest) (r *videoservice.GetVideoListResponse, err error) {
	var _args videoservice.VideoServiceGetVideoListArgs
	_args.Req = req
	var _result videoservice.VideoServiceGetVideoListResult
	if err = p.c.Call(ctx, "GetVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFeed(ctx context.Context, req *videoservice.GetFeedRequest) (r *videoservice.GetFeedResponse, err error) {
	var _args videoservice.VideoServiceGetFeedArgs
	_args.Req = req
	var _result videoservice.VideoServiceGetFeedResult
	if err = p.c.Call(ctx, "GetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
